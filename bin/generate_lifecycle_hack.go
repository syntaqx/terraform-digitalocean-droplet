package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
)

var lifecycles = []string{"create_before_destroy", "prevent_destroy"}

func perm(set []string) (subsets [][]string) {
	length := uint(len(set))

	for subsetBits := 1; subsetBits < (1 << length); subsetBits++ {
		var subset []string

		for object := uint(0); object < length; object++ {
			if (subsetBits>>object)&1 == 1 {
				subset = append(subset, set[object])
			}
		}
		subsets = append(subsets, subset)
	}

	return subsets
}

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

// Couldn't be bothered to lookup how to call the SDK directly
func terraformFmt() {
	cmd := exec.Command("terraform", "fmt", "./...")

	var stdout bytes.Buffer
	cmd.Stdout = &stdout

	var stderr bytes.Buffer
	cmd.Stderr = &stderr

	if err := cmd.Run(); err != nil {
		panic(fmt.Sprintf("%v %s", err, stderr.String()))
	}
}

func main() {
	b, err := ioutil.ReadFile("./droplet.tf")
	if err != nil {
		panic(err)
	}

	tmpl := string(b)
	dest := "./droplet_lifecycle_hack.tf"

	if err := os.Truncate(dest, 0); err != nil {
		panic(err)
	}

	f, err := os.OpenFile(dest, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	if _, err := f.WriteString("# THIS FILE IS GENERATED BY generate_droplet_lifecycle_hack.go\n"); err != nil {
		panic(err)
	}

	for _, targets := range perm(lifecycles) {
		if _, err := f.WriteString("\n# ==========================================================\n"); err != nil {
			panic(err)
		}

		hack := strings.Replace(tmpl, `"droplet"`, fmt.Sprintf(`"droplet_hack_%s"`, strings.Join(targets, "_")), -1)
		count := ""

		for _, cycle := range lifecycles {
			ok := contains(targets, cycle)
			appender := " && "
			if len(count) == 0 {
				appender = ""
			}

			count = fmt.Sprintf(`%s%slookup(var.hack, "%s", false) == %t`, count, appender, cycle, ok)
			hack = strings.Replace(hack, "#lifecycle_hack", fmt.Sprintf("%s = %t\n#lifecycle_hack", cycle, ok), -1)
		}

		hack = strings.Replace(hack, `local.count_minus_hacks`, fmt.Sprintf("%s ? local.count : 0", count), -1)
		hack = strings.Replace(hack, `#lifecycle_hack`, "", -1)

		if _, err = f.WriteString(hack); err != nil {
			panic(err)
		}
	}

	terraformFmt()

	fmt.Println("Generated âœ”")
}
